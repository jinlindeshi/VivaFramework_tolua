---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by likai.
--- DateTime: 2023/2/14 10:49
--- 角色说话
---@class Talk:LuaObj
local Talk = class("Talk", LuaObj)

---@param featureInfo TalkerInfo 详见 TalkerConfig
---@param contentList table 说话内容列表
---@param callBack function 完毕回调
---@param beforeTalkCall function fun(goOnFun, index)每段文本前回调
---@param afterTalkCall function fun(goOnFun, index)每段文本后回调
---@param flyFromWorldPos Vector3 从这个位置飞来
function Talk.Play(featureInfo, contentList, callBack, beforeTalkCall, afterTalkCall, flyFromWorldPos)
    if not Talk.instance then
        Talk.instance = Talk.New() ---@type Talk
    end
    --print("Talk.Show",Talk.instance.gameObject)
    Talk.instance:Show(featureInfo, contentList, callBack, beforeTalkCall, afterTalkCall, flyFromWorldPos)
end

---@param list table
function Talk.PlayList(list, callBack)
    local info = table.remove(list,1)
    Talk.Play(info[1], info[2], function()
        if #list > 0 then
            Talk.PlayList(list, callBack)
        elseif callBack then
            callBack()
        end
    end)
end

---对话是否能点击
---@param enbaled boolean
function Talk.SetCantHide(enbaled)
    Talk.instance.cantHide = enbaled
end

---震动效果
Talk.SHAKE_EFF_FUN = function(playFun)
    --playFun()
    Happy.Shake(Talk.instance.featureC,0.5, playFun, 6)
end

function Talk:Ctor()

    Talk.super.Ctor(self, "Prefabs/Common/Talk.prefab", nil, Constants.LAYER_GUIDE)

    self.nameLabel = GetComponent.TextMeshProUGUI(self.transform:Find("Bg/nameBg/nameText").gameObject)
    self.contentLabel = GetComponent.TextMeshProUGUI(self.transform:Find("Bg/contentText").gameObject)
    self.TMPEffect = AddOrGetComponent(self.contentLabel.gameObject, TMPEffect) ---@type TMPEffect
    self.nameLabel.text = ""
    self.contentLabel.text = ""
    self.featureC = self.transform:Find("Bg/featureC")
    self.arrow = self.transform:Find("Bg/arrow").gameObject
    self.cg = GetComponent.CanvasGroup(self.gameObject)
    self.bgRect = GetComponent.RectTransform(self.transform:Find("Bg").gameObject)
    self.waitingForClick = false
    self.cantHide = false

    AddButtonHandler(self.gameObject, PointerHandler.CLICK, happyCall(self, self.ClickHandler))
    Talk.instance = self
end

function Talk:ClickHandler()
    if self.waitingForClick == true then
        if self.afterTalkCall then
            self.afterTalkCall(happyCall(self, self.PlayContent), self.playContentIdx)
        else
            self:PlayContent()
        end
    elseif self.textTween then
        self.textTween.timeScale = 100
        --DelayedFrameCall(function()
        --    if self.textTween then
        --        self.textTween.timeScale = 1
        --    end
        --end)
    end
end

local UILayer = LayerMask.NameToLayer("UI")
---@param featureInfo TalkerInfo
---@param flyFromWorldPos Vector3
function Talk:Show(featureInfo, contentList, callBack, beforeTalkCall, afterTalkCall, flyFromWorldPos)
    Talk.super.Show(self)
    if self:CheckFeatureNoChange() == true then
        return
    end
    self.cg.alpha = 0
    local dur = 0.3
    self.cg:DOFade(1,dur)
    self.flyFromWorldPos = flyFromWorldPos
    if flyFromWorldPos then
        local goalPos = self.bgRect.position
        self.bgRect.position = flyFromWorldPos
        self.bgRect.localScale = Vector3.zero
        self.bgRect:DOMove(goalPos, dur)
        self.bgRect:DOScale(Vector3.one, dur)
    end
    self:ClearFeatures()
    self.featureInfo = featureInfo
    self.contentList = contentList
    self.callBack = callBack
    self.beforeTalkCall = beforeTalkCall
    self.afterTalkCall = afterTalkCall
    self.talkerType = featureInfo.type or TalkerConfig.talkerType.pic
    self.use3d = (self.talkerType == TalkerConfig.talkerType.model)

    self.nameLabel.text = featureInfo.name
    self.nameLabel.gameObject:SetActive(featureInfo.name ~= "")
    for i = 1, #featureInfo.featureList do
        local props = featureInfo.featureList[i] ---@type TalkerProp
        local featureGo
        ---spine
        if self.talkerType == TalkerConfig.talkerType.spine then
            featureGo = CreatePrefab(props.path, self.featureC)
            featureGo.name = "feature_spine_"..i
            local imgRect = AddOrGetComponent(featureGo, UnityEngine.RectTransform) ---@type UnityEngine.RectTransform
            for propName, propValue in pairs(props.transformProps) do
                imgRect[propName] = propValue
            end

        ---2D图片
        else
            featureGo = GameObject.New() ---@type UnityEngine.GameObject
            featureGo.name = "feature_pic_"..i
            local img = AddOrGetComponent(featureGo, UnityEngine.UI.Image) ---@type UnityEngine.UI.Image
            img.sprite = resMgr:LoadSpriteAtPath(props.path)
            img:SetNativeSize()
            local imgRect = AddOrGetComponent(featureGo, UnityEngine.RectTransform) ---@type UnityEngine.RectTransform
            imgRect:SetParent(self.featureC)
            imgRect.localPosition = Vector3.zero
            imgRect.localEulerAngles = Vector3.zero
            imgRect.localScale = Vector3.one
            for propName, propValue in pairs(props.transformProps) do
                imgRect[propName] = propValue
            end
        end
        LuaHelper.SetLayerRecursive(featureGo, UILayer)
        table.insert(self.featureObjList, featureGo)
    end

    self.playContentIdx = 0
    if flyFromWorldPos then
        dur = dur + 0.3
    end
    DelayedCall(dur, happyCall(self, self.PlayContent))
end

---播放文本内容
function Talk:PlayContent()
    self.arrow:SetActive(false)
    self.waitingForClick = false
    self.playContentIdx = self.playContentIdx + 1
    if #self.contentList < self.playContentIdx then
        if self.cantHide == true then
            return
        end
        local hideDur = 0.2
        if self.flyFromWorldPos then
            local nativePos = self.bgRect.position
            local flyFromWorldPos = self.flyFromWorldPos
            self.flyFromWorldPos = nil
            hideDur = 0.3
            self.bgRect:DOMove(flyFromWorldPos, hideDur)
            self.bgRect:DOScale(Vector3.zero, hideDur):OnComplete(function()
                self.bgRect.position = nativePos
                self.bgRect.localScale = Vector3.one
            end)
        end
        self.cg:DOFade(0,hideDur):OnComplete(function()
            self:Hide()
            self:ClearFeatures()
            self.contentLabel.text = ""
            if self.callBack then
                local call = self.callBack
                self.callBack = nil
                call()
            end
        end)
        return
    end
    local playFun = function()
        self.contentLabel.text = ""
        local content = self.contentList[self.playContentIdx]
        self.TMPEffect:PlayFadingType(content, 0.1)
        self.textTween = self.TMPEffect.fadingSequence
        self.textTween:AppendCallback(function()
            self.textTween = nil
            self.arrow:SetActive(not self.cantHide)
            self.waitingForClick = true
        end)  ---@type DG.Tweening.Sequence
    end
    if self.beforeTalkCall then
        self.beforeTalkCall(playFun, self.playContentIdx)
    else
        playFun()
    end
end

---清理现有的形象们
function Talk:ClearFeatures()
    local i = 1
    while(self.featureC.childCount > 0) do
        local featureGo = self.featureC:GetChild(0).gameObject
        if self.use3d == true then
            local props = self.featureInfo.featureList[i] ---@type TalkerProp
            RecyclePrefab(featureGo, props.path)
            LuaHelper.SetLayerRecursive(featureGo, props.oldLayer)
            --print("你妹啊~", featureGo.transform.parent.name, props.oldScale.x, props.oldScale.y, props.oldScale.z)
            featureGo.transform.localScale = props.oldScale
            i = i + 1
        else
            DestroyImmediate(featureGo)
        end
    end
    self.featureObjList = {}
end

---验证Feature数据是不是没变
function Talk:CheckFeatureNoChange()

end

return Talk