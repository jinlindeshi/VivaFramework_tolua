//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BehaviorDesigner_Runtime_UpdateIntervalTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(BehaviorDesigner.Runtime.UpdateIntervalType));
		L.RegVar("EveryFrame", get_EveryFrame, null);
		L.RegVar("SpecifySeconds", get_SpecifySeconds, null);
		L.RegVar("Manual", get_Manual, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<BehaviorDesigner.Runtime.UpdateIntervalType>.Check = CheckType;
		StackTraits<BehaviorDesigner.Runtime.UpdateIntervalType>.Push = Push;
	}

	static void Push(IntPtr L, BehaviorDesigner.Runtime.UpdateIntervalType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(BehaviorDesigner.Runtime.UpdateIntervalType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EveryFrame(IntPtr L)
	{
		ToLua.Push(L, BehaviorDesigner.Runtime.UpdateIntervalType.EveryFrame);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpecifySeconds(IntPtr L)
	{
		ToLua.Push(L, BehaviorDesigner.Runtime.UpdateIntervalType.SpecifySeconds);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Manual(IntPtr L)
	{
		ToLua.Push(L, BehaviorDesigner.Runtime.UpdateIntervalType.Manual);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		BehaviorDesigner.Runtime.UpdateIntervalType o = (BehaviorDesigner.Runtime.UpdateIntervalType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

