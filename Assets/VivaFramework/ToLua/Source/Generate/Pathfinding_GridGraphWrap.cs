//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_GridGraphWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.GridGraph), typeof(Pathfinding.NavGraph));
		L.RegFunction("CountNodes", CountNodes);
		L.RegFunction("GetNodes", GetNodes);
		L.RegFunction("RelocateNodes", RelocateNodes);
		L.RegFunction("GraphPointToWorld", GraphPointToWorld);
		L.RegFunction("ConvertHexagonSizeToNodeSize", ConvertHexagonSizeToNodeSize);
		L.RegFunction("ConvertNodeSizeToHexagonSize", ConvertNodeSizeToHexagonSize);
		L.RegFunction("GetConnectionCost", GetConnectionCost);
		L.RegFunction("GetNodeConnection", GetNodeConnection);
		L.RegFunction("HasNodeConnection", HasNodeConnection);
		L.RegFunction("SetNodeConnection", SetNodeConnection);
		L.RegFunction("SetDimensions", SetDimensions);
		L.RegFunction("UpdateTransform", UpdateTransform);
		L.RegFunction("CalculateTransform", CalculateTransform);
		L.RegFunction("GetNearest", GetNearest);
		L.RegFunction("GetNearestForce", GetNearestForce);
		L.RegFunction("SetUpOffsetsAndCosts", SetUpOffsetsAndCosts);
		L.RegFunction("RecalculateCell", RecalculateCell);
		L.RegFunction("ErodeWalkableArea", ErodeWalkableArea);
		L.RegFunction("IsValidConnection", IsValidConnection);
		L.RegFunction("CalculateConnectionsForCellAndNeighbours", CalculateConnectionsForCellAndNeighbours);
		L.RegFunction("CalculateConnections", CalculateConnections);
		L.RegFunction("OnDrawGizmos", OnDrawGizmos);
		L.RegFunction("GetNodesInRegion", GetNodesInRegion);
		L.RegFunction("GetNode", GetNode);
		L.RegFunction("CheckConnection", CheckConnection);
		L.RegFunction("New", _CreatePathfinding_GridGraph);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("inspectorGridMode", get_inspectorGridMode, set_inspectorGridMode);
		L.RegVar("inspectorHexagonSizeMode", get_inspectorHexagonSizeMode, set_inspectorHexagonSizeMode);
		L.RegVar("width", get_width, set_width);
		L.RegVar("depth", get_depth, set_depth);
		L.RegVar("aspectRatio", get_aspectRatio, set_aspectRatio);
		L.RegVar("isometricAngle", get_isometricAngle, set_isometricAngle);
		L.RegVar("uniformEdgeCosts", get_uniformEdgeCosts, set_uniformEdgeCosts);
		L.RegVar("rotation", get_rotation, set_rotation);
		L.RegVar("center", get_center, set_center);
		L.RegVar("unclampedSize", get_unclampedSize, set_unclampedSize);
		L.RegVar("nodeSize", get_nodeSize, set_nodeSize);
		L.RegVar("collision", get_collision, set_collision);
		L.RegVar("maxClimb", get_maxClimb, set_maxClimb);
		L.RegVar("maxSlope", get_maxSlope, set_maxSlope);
		L.RegVar("erodeIterations", get_erodeIterations, set_erodeIterations);
		L.RegVar("erosionUseTags", get_erosionUseTags, set_erosionUseTags);
		L.RegVar("erosionFirstTag", get_erosionFirstTag, set_erosionFirstTag);
		L.RegVar("neighbours", get_neighbours, set_neighbours);
		L.RegVar("cutCorners", get_cutCorners, set_cutCorners);
		L.RegVar("penaltyPositionOffset", get_penaltyPositionOffset, set_penaltyPositionOffset);
		L.RegVar("penaltyPosition", get_penaltyPosition, set_penaltyPosition);
		L.RegVar("penaltyPositionFactor", get_penaltyPositionFactor, set_penaltyPositionFactor);
		L.RegVar("penaltyAngle", get_penaltyAngle, set_penaltyAngle);
		L.RegVar("penaltyAngleFactor", get_penaltyAngleFactor, set_penaltyAngleFactor);
		L.RegVar("penaltyAnglePower", get_penaltyAnglePower, set_penaltyAnglePower);
		L.RegVar("showMeshOutline", get_showMeshOutline, set_showMeshOutline);
		L.RegVar("showNodeConnections", get_showNodeConnections, set_showNodeConnections);
		L.RegVar("showMeshSurface", get_showMeshSurface, set_showMeshSurface);
		L.RegVar("neighbourOffsets", get_neighbourOffsets, null);
		L.RegVar("neighbourCosts", get_neighbourCosts, null);
		L.RegVar("neighbourXOffsets", get_neighbourXOffsets, null);
		L.RegVar("neighbourZOffsets", get_neighbourZOffsets, null);
		L.RegConstant("getNearestForceOverlap", 2);
		L.RegVar("nodes", get_nodes, set_nodes);
		L.RegVar("uniformWidthDepthGrid", get_uniformWidthDepthGrid, null);
		L.RegVar("LayerCount", get_LayerCount, null);
		L.RegVar("size", get_size, null);
		L.RegVar("transform", get_transform, null);
		L.RegVar("Width", get_Width, set_Width);
		L.RegVar("Depth", get_Depth, set_Depth);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePathfinding_GridGraph(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Pathfinding.GridGraph obj = new Pathfinding.GridGraph();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Pathfinding.GridGraph.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CountNodes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			int o = obj.CountNodes();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNodes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Action<Pathfinding.GraphNode>>(L, 2))
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				System.Action<Pathfinding.GraphNode> arg0 = (System.Action<Pathfinding.GraphNode>)ToLua.ToObject(L, 2);
				obj.GetNodes(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Func<Pathfinding.GraphNode,bool>>(L, 2))
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				System.Func<Pathfinding.GraphNode,bool> arg0 = (System.Func<Pathfinding.GraphNode,bool>)ToLua.ToObject(L, 2);
				obj.GetNodes(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.GridGraph.GetNodes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RelocateNodes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 2);
				obj.RelocateNodes(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 2);
				UnityEngine.Matrix4x4 arg1 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 3);
				obj.RelocateNodes(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Quaternion arg1 = ToLua.ToQuaternion(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				obj.RelocateNodes(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Quaternion arg1 = ToLua.ToQuaternion(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				obj.RelocateNodes(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				UnityEngine.Quaternion arg1 = ToLua.ToQuaternion(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
				obj.RelocateNodes(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.GridGraph.RelocateNodes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GraphPointToWorld(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			Pathfinding.Int3 o = obj.GraphPointToWorld(arg0, arg1, arg2);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConvertHexagonSizeToNodeSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.InspectorGridHexagonNodeSize arg0 = (Pathfinding.InspectorGridHexagonNodeSize)ToLua.CheckObject(L, 1, typeof(Pathfinding.InspectorGridHexagonNodeSize));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float o = Pathfinding.GridGraph.ConvertHexagonSizeToNodeSize(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConvertNodeSizeToHexagonSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.InspectorGridHexagonNodeSize arg0 = (Pathfinding.InspectorGridHexagonNodeSize)ToLua.CheckObject(L, 1, typeof(Pathfinding.InspectorGridHexagonNodeSize));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float o = Pathfinding.GridGraph.ConvertNodeSizeToHexagonSize(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConnectionCost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			uint o = obj.GetConnectionCost(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNodeConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			Pathfinding.GridNode arg0 = (Pathfinding.GridNode)ToLua.CheckObject<Pathfinding.GridNode>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			Pathfinding.GridNode o = obj.GetNodeConnection(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasNodeConnection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				Pathfinding.GridNode arg0 = (Pathfinding.GridNode)ToLua.CheckObject<Pathfinding.GridNode>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				bool o = obj.HasNodeConnection(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.HasNodeConnection(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.GridGraph.HasNodeConnection");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNodeConnection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				Pathfinding.GridNode arg0 = (Pathfinding.GridNode)ToLua.CheckObject<Pathfinding.GridNode>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.SetNodeConnection(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 6)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
				obj.SetNodeConnection(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.GridGraph.SetNodeConnection");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDimensions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.SetDimensions(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			obj.UpdateTransform();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			Pathfinding.Util.GraphTransform o = obj.CalculateTransform();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNearest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				Pathfinding.NNInfoInternal o = obj.GetNearest(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				Pathfinding.NNConstraint arg1 = (Pathfinding.NNConstraint)ToLua.CheckObject<Pathfinding.NNConstraint>(L, 3);
				Pathfinding.NNInfoInternal o = obj.GetNearest(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				Pathfinding.NNConstraint arg1 = (Pathfinding.NNConstraint)ToLua.CheckObject<Pathfinding.NNConstraint>(L, 3);
				Pathfinding.GraphNode arg2 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 4);
				Pathfinding.NNInfoInternal o = obj.GetNearest(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.GridGraph.GetNearest");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNearestForce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			Pathfinding.NNConstraint arg1 = (Pathfinding.NNConstraint)ToLua.CheckObject<Pathfinding.NNConstraint>(L, 3);
			Pathfinding.NNInfoInternal o = obj.GetNearestForce(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUpOffsetsAndCosts(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			obj.SetUpOffsetsAndCosts();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecalculateCell(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.RecalculateCell(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.RecalculateCell(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				obj.RecalculateCell(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.GridGraph.RecalculateCell");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ErodeWalkableArea(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				obj.ErodeWalkableArea();
				return 0;
			}
			else if (count == 5)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				obj.ErodeWalkableArea(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.GridGraph.ErodeWalkableArea");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsValidConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			Pathfinding.GridNodeBase arg0 = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 2);
			Pathfinding.GridNodeBase arg1 = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 3);
			bool o = obj.IsValidConnection(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateConnectionsForCellAndNeighbours(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.CalculateConnectionsForCellAndNeighbours(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateConnections(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				Pathfinding.GridNodeBase arg0 = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 2);
				obj.CalculateConnections(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.CalculateConnections(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.GridGraph.CalculateConnections");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrawGizmos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			Pathfinding.Util.RetainedGizmos arg0 = (Pathfinding.Util.RetainedGizmos)ToLua.CheckObject<Pathfinding.Util.RetainedGizmos>(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.OnDrawGizmos(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNodesInRegion(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Bounds>(L, 2))
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				UnityEngine.Bounds arg0 = ToLua.ToBounds(L, 2);
				System.Collections.Generic.List<Pathfinding.GraphNode> o = obj.GetNodesInRegion(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Pathfinding.GraphUpdateShape>(L, 2))
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				Pathfinding.GraphUpdateShape arg0 = (Pathfinding.GraphUpdateShape)ToLua.ToObject(L, 2);
				System.Collections.Generic.List<Pathfinding.GraphNode> o = obj.GetNodesInRegion(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Pathfinding.IntRect>(L, 2))
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				Pathfinding.IntRect arg0 = StackTraits<Pathfinding.IntRect>.To(L, 2);
				System.Collections.Generic.List<Pathfinding.GraphNode> o = obj.GetNodesInRegion(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
				Pathfinding.IntRect arg0 = StackTraits<Pathfinding.IntRect>.Check(L, 2);
				Pathfinding.GridNodeBase[] arg1 = ToLua.CheckObjectArray<Pathfinding.GridNodeBase>(L, 3);
				int o = obj.GetNodesInRegion(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.GridGraph.GetNodesInRegion");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			Pathfinding.GridNodeBase o = obj.GetNode(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)ToLua.CheckObject<Pathfinding.GridGraph>(L, 1);
			Pathfinding.GridNode arg0 = (Pathfinding.GridNode)ToLua.CheckObject<Pathfinding.GridNode>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.CheckConnection(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inspectorGridMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.InspectorGridMode ret = obj.inspectorGridMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inspectorGridMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inspectorHexagonSizeMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.InspectorGridHexagonNodeSize ret = obj.inspectorHexagonSizeMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inspectorHexagonSizeMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int ret = obj.width;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index width on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_depth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int ret = obj.depth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index depth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_aspectRatio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float ret = obj.aspectRatio;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index aspectRatio on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isometricAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float ret = obj.isometricAngle;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isometricAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uniformEdgeCosts(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool ret = obj.uniformEdgeCosts;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uniformEdgeCosts on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			UnityEngine.Vector3 ret = obj.rotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_center(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			UnityEngine.Vector3 ret = obj.center;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index center on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unclampedSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			UnityEngine.Vector2 ret = obj.unclampedSize;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index unclampedSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nodeSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float ret = obj.nodeSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nodeSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_collision(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.GraphCollision ret = obj.collision;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index collision on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxClimb(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float ret = obj.maxClimb;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxClimb on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxSlope(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float ret = obj.maxSlope;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxSlope on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_erodeIterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int ret = obj.erodeIterations;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index erodeIterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_erosionUseTags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool ret = obj.erosionUseTags;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index erosionUseTags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_erosionFirstTag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int ret = obj.erosionFirstTag;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index erosionFirstTag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_neighbours(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.NumNeighbours ret = obj.neighbours;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index neighbours on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cutCorners(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool ret = obj.cutCorners;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cutCorners on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_penaltyPositionOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float ret = obj.penaltyPositionOffset;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyPositionOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_penaltyPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool ret = obj.penaltyPosition;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_penaltyPositionFactor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float ret = obj.penaltyPositionFactor;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyPositionFactor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_penaltyAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool ret = obj.penaltyAngle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_penaltyAngleFactor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float ret = obj.penaltyAngleFactor;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyAngleFactor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_penaltyAnglePower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float ret = obj.penaltyAnglePower;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyAnglePower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showMeshOutline(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool ret = obj.showMeshOutline;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showMeshOutline on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showNodeConnections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool ret = obj.showNodeConnections;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showNodeConnections on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showMeshSurface(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool ret = obj.showMeshSurface;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showMeshSurface on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_neighbourOffsets(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int[] ret = obj.neighbourOffsets;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index neighbourOffsets on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_neighbourCosts(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			uint[] ret = obj.neighbourCosts;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index neighbourCosts on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_neighbourXOffsets(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int[] ret = obj.neighbourXOffsets;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index neighbourXOffsets on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_neighbourZOffsets(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int[] ret = obj.neighbourZOffsets;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index neighbourZOffsets on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.GridNode[] ret = obj.nodes;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uniformWidthDepthGrid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool ret = obj.uniformWidthDepthGrid;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uniformWidthDepthGrid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LayerCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int ret = obj.LayerCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LayerCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			UnityEngine.Vector2 ret = obj.size;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_transform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.Util.GraphTransform ret = obj.transform;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index transform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int ret = obj.Width;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Width on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Depth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int ret = obj.Depth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Depth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inspectorGridMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.InspectorGridMode arg0 = (Pathfinding.InspectorGridMode)ToLua.CheckObject(L, 2, typeof(Pathfinding.InspectorGridMode));
			obj.inspectorGridMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inspectorGridMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inspectorHexagonSizeMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.InspectorGridHexagonNodeSize arg0 = (Pathfinding.InspectorGridHexagonNodeSize)ToLua.CheckObject(L, 2, typeof(Pathfinding.InspectorGridHexagonNodeSize));
			obj.inspectorHexagonSizeMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inspectorHexagonSizeMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.width = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index width on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_depth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.depth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index depth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_aspectRatio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.aspectRatio = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index aspectRatio on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isometricAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.isometricAngle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isometricAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uniformEdgeCosts(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.uniformEdgeCosts = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uniformEdgeCosts on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.rotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_center(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.center = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index center on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unclampedSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.unclampedSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index unclampedSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nodeSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.nodeSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nodeSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_collision(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.GraphCollision arg0 = (Pathfinding.GraphCollision)ToLua.CheckObject<Pathfinding.GraphCollision>(L, 2);
			obj.collision = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index collision on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxClimb(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxClimb = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxClimb on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxSlope(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxSlope = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxSlope on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_erodeIterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.erodeIterations = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index erodeIterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_erosionUseTags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.erosionUseTags = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index erosionUseTags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_erosionFirstTag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.erosionFirstTag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index erosionFirstTag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_neighbours(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.NumNeighbours arg0 = (Pathfinding.NumNeighbours)ToLua.CheckObject(L, 2, typeof(Pathfinding.NumNeighbours));
			obj.neighbours = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index neighbours on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cutCorners(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.cutCorners = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cutCorners on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_penaltyPositionOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.penaltyPositionOffset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyPositionOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_penaltyPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.penaltyPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_penaltyPositionFactor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.penaltyPositionFactor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyPositionFactor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_penaltyAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.penaltyAngle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_penaltyAngleFactor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.penaltyAngleFactor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyAngleFactor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_penaltyAnglePower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.penaltyAnglePower = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index penaltyAnglePower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showMeshOutline(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showMeshOutline = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showMeshOutline on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showNodeConnections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showNodeConnections = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showNodeConnections on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showMeshSurface(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showMeshSurface = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showMeshSurface on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			Pathfinding.GridNode[] arg0 = ToLua.CheckObjectArray<Pathfinding.GridNode>(L, 2);
			obj.nodes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Width = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Width on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Depth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridGraph obj = (Pathfinding.GridGraph)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Depth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Depth on a nil value");
		}
	}
}

