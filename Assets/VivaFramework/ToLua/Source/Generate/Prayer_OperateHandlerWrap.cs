//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Prayer_OperateHandlerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Prayer.OperateHandler), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("AddCall", AddCall);
		L.RegFunction("RemoveCall", RemoveCall);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCall(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Prayer.OperateHandler obj = (Prayer.OperateHandler)ToLua.CheckObject<Prayer.OperateHandler>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			LuaInterface.LuaFunction o = obj.AddCall(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveCall(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Prayer.OperateHandler obj = (Prayer.OperateHandler)ToLua.CheckObject<Prayer.OperateHandler>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			obj.RemoveCall(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

