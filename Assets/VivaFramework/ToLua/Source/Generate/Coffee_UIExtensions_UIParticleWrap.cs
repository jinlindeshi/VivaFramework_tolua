//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Coffee_UIExtensions_UIParticleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Coffee.UIExtensions.UIParticle), typeof(UnityEngine.UI.MaskableGraphic));
		L.RegFunction("Play", Play);
		L.RegFunction("Pause", Pause);
		L.RegFunction("Stop", Stop);
		L.RegFunction("Clear", Clear);
		L.RegFunction("SetParticleSystemInstance", SetParticleSystemInstance);
		L.RegFunction("SetParticleSystemPrefab", SetParticleSystemPrefab);
		L.RegFunction("RefreshParticles", RefreshParticles);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("raycastTarget", get_raycastTarget, set_raycastTarget);
		L.RegVar("ignoreCanvasScaler", get_ignoreCanvasScaler, set_ignoreCanvasScaler);
		L.RegVar("shrinkByMaterial", get_shrinkByMaterial, set_shrinkByMaterial);
		L.RegVar("scale", get_scale, set_scale);
		L.RegVar("scale3D", get_scale3D, set_scale3D);
		L.RegVar("particles", get_particles, null);
		L.RegVar("materials", get_materials, null);
		L.RegVar("materialForRendering", get_materialForRendering, null);
		L.RegVar("activeMeshIndices", get_activeMeshIndices, set_activeMeshIndices);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)ToLua.CheckObject<Coffee.UIExtensions.UIParticle>(L, 1);
			obj.Play();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)ToLua.CheckObject<Coffee.UIExtensions.UIParticle>(L, 1);
			obj.Pause();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)ToLua.CheckObject<Coffee.UIExtensions.UIParticle>(L, 1);
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)ToLua.CheckObject<Coffee.UIExtensions.UIParticle>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetParticleSystemInstance(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)ToLua.CheckObject<Coffee.UIExtensions.UIParticle>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.SetParticleSystemInstance(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)ToLua.CheckObject<Coffee.UIExtensions.UIParticle>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetParticleSystemInstance(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Coffee.UIExtensions.UIParticle.SetParticleSystemInstance");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetParticleSystemPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)ToLua.CheckObject<Coffee.UIExtensions.UIParticle>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.SetParticleSystemPrefab(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshParticles(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)ToLua.CheckObject<Coffee.UIExtensions.UIParticle>(L, 1);
				obj.RefreshParticles();
				return 0;
			}
			else if (count == 2)
			{
				Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)ToLua.CheckObject<Coffee.UIExtensions.UIParticle>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.RefreshParticles(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Coffee.UIExtensions.UIParticle.RefreshParticles");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_raycastTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			bool ret = obj.raycastTarget;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index raycastTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ignoreCanvasScaler(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			bool ret = obj.ignoreCanvasScaler;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ignoreCanvasScaler on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shrinkByMaterial(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			bool ret = obj.shrinkByMaterial;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shrinkByMaterial on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			float ret = obj.scale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scale3D(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			UnityEngine.Vector3 ret = obj.scale3D;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale3D on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_particles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			System.Collections.Generic.List<UnityEngine.ParticleSystem> ret = obj.particles;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index particles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_materials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			System.Collections.Generic.IEnumerable<UnityEngine.Material> ret = obj.materials;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index materials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_materialForRendering(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			UnityEngine.Material ret = obj.materialForRendering;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index materialForRendering on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_activeMeshIndices(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			System.Collections.Generic.List<bool> ret = obj.activeMeshIndices;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index activeMeshIndices on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_raycastTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.raycastTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index raycastTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ignoreCanvasScaler(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ignoreCanvasScaler = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ignoreCanvasScaler on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shrinkByMaterial(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.shrinkByMaterial = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shrinkByMaterial on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.scale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scale3D(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.scale3D = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale3D on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_activeMeshIndices(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Coffee.UIExtensions.UIParticle obj = (Coffee.UIExtensions.UIParticle)o;
			System.Collections.Generic.List<bool> arg0 = (System.Collections.Generic.List<bool>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<bool>));
			obj.activeMeshIndices = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index activeMeshIndices on a nil value");
		}
	}
}

