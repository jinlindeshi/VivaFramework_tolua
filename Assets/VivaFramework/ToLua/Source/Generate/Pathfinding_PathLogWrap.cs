//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_PathLogWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Pathfinding.PathLog));
		L.RegVar("None", get_None, null);
		L.RegVar("Normal", get_Normal, null);
		L.RegVar("Heavy", get_Heavy, null);
		L.RegVar("InGame", get_InGame, null);
		L.RegVar("OnlyErrors", get_OnlyErrors, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Pathfinding.PathLog>.Check = CheckType;
		StackTraits<Pathfinding.PathLog>.Push = Push;
	}

	static void Push(IntPtr L, Pathfinding.PathLog arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Pathfinding.PathLog), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.Push(L, Pathfinding.PathLog.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Normal(IntPtr L)
	{
		ToLua.Push(L, Pathfinding.PathLog.Normal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Heavy(IntPtr L)
	{
		ToLua.Push(L, Pathfinding.PathLog.Heavy);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InGame(IntPtr L)
	{
		ToLua.Push(L, Pathfinding.PathLog.InGame);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnlyErrors(IntPtr L)
	{
		ToLua.Push(L, Pathfinding.PathLog.OnlyErrors);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Pathfinding.PathLog o = (Pathfinding.PathLog)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

