//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Prayer_DragHandler3DWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Prayer.DragHandler3D), typeof(Prayer.OperateHandler));
		L.RegFunction("SetMovedGameObj", SetMovedGameObj);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BEGIN_DRAG", get_BEGIN_DRAG, null);
		L.RegVar("DRAG", get_DRAG, null);
		L.RegVar("END_DRAG", get_END_DRAG, null);
		L.RegVar("MOUSE_ENTER", get_MOUSE_ENTER, null);
		L.RegVar("MOUSE_EXIT", get_MOUSE_EXIT, null);
		L.RegVar("DRAG_ENABLE", get_DRAG_ENABLE, null);
		L.RegVar("DRAG_DISABLE", get_DRAG_DISABLE, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMovedGameObj(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Prayer.DragHandler3D obj = (Prayer.DragHandler3D)ToLua.CheckObject<Prayer.DragHandler3D>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.SetMovedGameObj(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Prayer.DragHandler3D obj = (Prayer.DragHandler3D)ToLua.CheckObject<Prayer.DragHandler3D>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				obj.SetMovedGameObj(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Prayer.DragHandler3D.SetMovedGameObj");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BEGIN_DRAG(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Prayer.DragHandler3D.BEGIN_DRAG);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DRAG(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Prayer.DragHandler3D.DRAG);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_END_DRAG(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Prayer.DragHandler3D.END_DRAG);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MOUSE_ENTER(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Prayer.DragHandler3D.MOUSE_ENTER);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MOUSE_EXIT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Prayer.DragHandler3D.MOUSE_EXIT);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DRAG_ENABLE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Prayer.DragHandler3D.DRAG_ENABLE);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DRAG_DISABLE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Prayer.DragHandler3D.DRAG_DISABLE);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

