//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_PathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.Path), typeof(System.Object));
		L.RegFunction("GetTotalLength", GetTotalLength);
		L.RegFunction("WaitForPath", WaitForPath);
		L.RegFunction("BlockUntilCalculated", BlockUntilCalculated);
		L.RegFunction("GetTagPenalty", GetTagPenalty);
		L.RegFunction("IsDone", IsDone);
		L.RegFunction("Error", Error);
		L.RegFunction("Claim", Claim);
		L.RegFunction("Release", Release);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("callback", get_callback, set_callback);
		L.RegVar("immediateCallback", get_immediateCallback, set_immediateCallback);
		L.RegVar("traversalProvider", get_traversalProvider, set_traversalProvider);
		L.RegVar("path", get_path, set_path);
		L.RegVar("vectorPath", get_vectorPath, set_vectorPath);
		L.RegVar("duration", get_duration, set_duration);
		L.RegVar("nnConstraint", get_nnConstraint, set_nnConstraint);
		L.RegVar("heuristic", get_heuristic, set_heuristic);
		L.RegVar("heuristicScale", get_heuristicScale, set_heuristicScale);
		L.RegVar("enabledTags", get_enabledTags, set_enabledTags);
		L.RegVar("PipelineState", get_PipelineState, null);
		L.RegVar("CompleteState", get_CompleteState, null);
		L.RegVar("error", get_error, null);
		L.RegVar("errorLog", get_errorLog, null);
		L.RegVar("pathID", get_pathID, null);
		L.RegVar("tagPenalties", get_tagPenalties, set_tagPenalties);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTotalLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			float o = obj.GetTotalLength();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WaitForPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			System.Collections.IEnumerator o = obj.WaitForPath();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BlockUntilCalculated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			obj.BlockUntilCalculated();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTagPenalty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			uint o = obj.GetTagPenalty(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			bool o = obj.IsDone();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Error(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			obj.Error();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Claim(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Claim(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.Release(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.Release(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Pathfinding.Path.Release");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_callback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.OnPathDelegate ret = obj.callback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index callback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_immediateCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.OnPathDelegate ret = obj.immediateCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index immediateCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_traversalProvider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.ITraversalProvider ret = obj.traversalProvider;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index traversalProvider on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			System.Collections.Generic.List<Pathfinding.GraphNode> ret = obj.path;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index path on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vectorPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			System.Collections.Generic.List<UnityEngine.Vector3> ret = obj.vectorPath;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vectorPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			float ret = obj.duration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index duration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nnConstraint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.NNConstraint ret = obj.nnConstraint;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nnConstraint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.Heuristic ret = obj.heuristic;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			float ret = obj.heuristicScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabledTags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int ret = obj.enabledTags;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enabledTags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PipelineState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.PathState ret = obj.PipelineState;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PipelineState on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CompleteState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.PathCompleteState ret = obj.CompleteState;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CompleteState on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_error(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			bool ret = obj.error;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index error on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_errorLog(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			string ret = obj.errorLog;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index errorLog on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			ushort ret = obj.pathID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tagPenalties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int[] ret = obj.tagPenalties;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tagPenalties on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_callback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.OnPathDelegate arg0 = (Pathfinding.OnPathDelegate)ToLua.CheckDelegate<Pathfinding.OnPathDelegate>(L, 2);
			obj.callback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index callback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_immediateCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.OnPathDelegate arg0 = (Pathfinding.OnPathDelegate)ToLua.CheckDelegate<Pathfinding.OnPathDelegate>(L, 2);
			obj.immediateCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index immediateCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_traversalProvider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.ITraversalProvider arg0 = (Pathfinding.ITraversalProvider)ToLua.CheckObject<Pathfinding.ITraversalProvider>(L, 2);
			obj.traversalProvider = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index traversalProvider on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			System.Collections.Generic.List<Pathfinding.GraphNode> arg0 = (System.Collections.Generic.List<Pathfinding.GraphNode>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Pathfinding.GraphNode>));
			obj.path = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index path on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_vectorPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			obj.vectorPath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vectorPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.duration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index duration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nnConstraint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.NNConstraint arg0 = (Pathfinding.NNConstraint)ToLua.CheckObject<Pathfinding.NNConstraint>(L, 2);
			obj.nnConstraint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nnConstraint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.Heuristic arg0 = (Pathfinding.Heuristic)ToLua.CheckObject(L, 2, typeof(Pathfinding.Heuristic));
			obj.heuristic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.heuristicScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabledTags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.enabledTags = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enabledTags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tagPenalties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.tagPenalties = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tagPenalties on a nil value");
		}
	}
}

