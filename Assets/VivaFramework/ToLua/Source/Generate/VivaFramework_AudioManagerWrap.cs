//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class VivaFramework_AudioManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(VivaFramework.AudioManager), typeof(Manager));
		L.RegFunction("GetAudioSource", GetAudioSource);
		L.RegFunction("CleanIdleAudioSource", CleanIdleAudioSource);
		L.RegFunction("GetAudioClip", GetAudioClip);
		L.RegFunction("PauseAllAudio", PauseAllAudio);
		L.RegFunction("PlayAllAudio", PlayAllAudio);
		L.RegFunction("StopAllAudio", StopAllAudio);
		L.RegFunction("PlayBGM", PlayBGM);
		L.RegFunction("StopBGM", StopBGM);
		L.RegFunction("PlayEffectAudio", PlayEffectAudio);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("effectAudioSource", get_effectAudioSource, set_effectAudioSource);
		L.RegVar("bgmAudioSource", get_bgmAudioSource, set_bgmAudioSource);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAudioSource(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
				UnityEngine.AudioSource o = obj.GetAudioSource();
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.AudioSource o = obj.GetAudioSource(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: VivaFramework.AudioManager.GetAudioSource");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanIdleAudioSource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
			obj.CleanIdleAudioSource();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAudioClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.AudioClip o = obj.GetAudioClip(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseAllAudio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
			obj.PauseAllAudio();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAllAudio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
			obj.PlayAllAudio();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllAudio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
			obj.StopAllAudio();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBGM(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.PlayBGM(arg0);
				return 0;
			}
			else if (count == 3)
			{
				VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.PlayBGM(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.PlayBGM(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: VivaFramework.AudioManager.PlayBGM");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopBGM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
			obj.StopBGM();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayEffectAudio(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.PlayEffectAudio(arg0);
				return 0;
			}
			else if (count == 3)
			{
				VivaFramework.AudioManager obj = (VivaFramework.AudioManager)ToLua.CheckObject<VivaFramework.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.PlayEffectAudio(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: VivaFramework.AudioManager.PlayEffectAudio");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_effectAudioSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)o;
			UnityEngine.AudioSource ret = obj.effectAudioSource;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index effectAudioSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bgmAudioSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)o;
			UnityEngine.AudioSource ret = obj.bgmAudioSource;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bgmAudioSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_effectAudioSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)o;
			UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioSource));
			obj.effectAudioSource = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index effectAudioSource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bgmAudioSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VivaFramework.AudioManager obj = (VivaFramework.AudioManager)o;
			UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioSource));
			obj.bgmAudioSource = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bgmAudioSource on a nil value");
		}
	}
}

