//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_GridNodeBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.GridNodeBase), typeof(Pathfinding.GraphNode));
		L.RegFunction("SurfaceArea", SurfaceArea);
		L.RegFunction("RandomPointOnSurface", RandomPointOnSurface);
		L.RegFunction("GetGizmoHashCode", GetGizmoHashCode);
		L.RegFunction("GetNeighbourAlongDirection", GetNeighbourAlongDirection);
		L.RegFunction("ContainsConnection", ContainsConnection);
		L.RegFunction("ClearCustomConnections", ClearCustomConnections);
		L.RegFunction("ClearConnections", ClearConnections);
		L.RegFunction("GetConnections", GetConnections);
		L.RegFunction("UpdateRecursiveG", UpdateRecursiveG);
		L.RegFunction("Open", Open);
		L.RegFunction("AddConnection", AddConnection);
		L.RegFunction("RemoveConnection", RemoveConnection);
		L.RegFunction("SerializeReferences", SerializeReferences);
		L.RegFunction("DeserializeReferences", DeserializeReferences);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("connections", get_connections, set_connections);
		L.RegVar("NodeInGridIndex", get_NodeInGridIndex, set_NodeInGridIndex);
		L.RegVar("XCoordinateInGrid", get_XCoordinateInGrid, null);
		L.RegVar("ZCoordinateInGrid", get_ZCoordinateInGrid, null);
		L.RegVar("WalkableErosion", get_WalkableErosion, set_WalkableErosion);
		L.RegVar("TmpWalkable", get_TmpWalkable, set_TmpWalkable);
		L.RegVar("HasConnectionsToAllEightNeighbours", get_HasConnectionsToAllEightNeighbours, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SurfaceArea(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			float o = obj.SurfaceArea();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RandomPointOnSurface(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			UnityEngine.Vector3 o = obj.RandomPointOnSurface();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGizmoHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			int o = obj.GetGizmoHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNeighbourAlongDirection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Pathfinding.GridNodeBase o = obj.GetNeighbourAlongDirection(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			bool o = obj.ContainsConnection(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearCustomConnections(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ClearCustomConnections(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearConnections(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ClearConnections(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConnections(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			System.Action<Pathfinding.GraphNode> arg0 = (System.Action<Pathfinding.GraphNode>)ToLua.CheckDelegate<System.Action<Pathfinding.GraphNode>>(L, 2);
			obj.GetConnections(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateRecursiveG(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 2);
			Pathfinding.PathNode arg1 = (Pathfinding.PathNode)ToLua.CheckObject<Pathfinding.PathNode>(L, 3);
			Pathfinding.PathHandler arg2 = (Pathfinding.PathHandler)ToLua.CheckObject<Pathfinding.PathHandler>(L, 4);
			obj.UpdateRecursiveG(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 2);
			Pathfinding.PathNode arg1 = (Pathfinding.PathNode)ToLua.CheckObject<Pathfinding.PathNode>(L, 3);
			Pathfinding.PathHandler arg2 = (Pathfinding.PathHandler)ToLua.CheckObject<Pathfinding.PathHandler>(L, 4);
			obj.Open(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			obj.AddConnection(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			obj.RemoveConnection(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SerializeReferences(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			Pathfinding.Serialization.GraphSerializationContext arg0 = (Pathfinding.Serialization.GraphSerializationContext)ToLua.CheckObject<Pathfinding.Serialization.GraphSerializationContext>(L, 2);
			obj.SerializeReferences(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeserializeReferences(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)ToLua.CheckObject<Pathfinding.GridNodeBase>(L, 1);
			Pathfinding.Serialization.GraphSerializationContext arg0 = (Pathfinding.Serialization.GraphSerializationContext)ToLua.CheckObject<Pathfinding.Serialization.GraphSerializationContext>(L, 2);
			obj.DeserializeReferences(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_connections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			Pathfinding.Connection[] ret = obj.connections;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index connections on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NodeInGridIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			int ret = obj.NodeInGridIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NodeInGridIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_XCoordinateInGrid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			int ret = obj.XCoordinateInGrid;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index XCoordinateInGrid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ZCoordinateInGrid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			int ret = obj.ZCoordinateInGrid;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ZCoordinateInGrid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WalkableErosion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			bool ret = obj.WalkableErosion;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WalkableErosion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TmpWalkable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			bool ret = obj.TmpWalkable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TmpWalkable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasConnectionsToAllEightNeighbours(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			bool ret = obj.HasConnectionsToAllEightNeighbours;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasConnectionsToAllEightNeighbours on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_connections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			Pathfinding.Connection[] arg0 = ToLua.CheckStructArray<Pathfinding.Connection>(L, 2);
			obj.connections = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index connections on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NodeInGridIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.NodeInGridIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NodeInGridIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WalkableErosion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WalkableErosion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WalkableErosion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TmpWalkable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GridNodeBase obj = (Pathfinding.GridNodeBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.TmpWalkable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TmpWalkable on a nil value");
		}
	}
}

