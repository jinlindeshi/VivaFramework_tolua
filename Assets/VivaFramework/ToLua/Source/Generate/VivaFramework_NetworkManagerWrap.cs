//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class VivaFramework_NetworkManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(VivaFramework.NetworkManager), typeof(Manager));
		L.RegFunction("Connect", Connect);
		L.RegFunction("Send", Send);
		L.RegFunction("Unload", Unload);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("pushCall", get_pushCall, set_pushCall);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VivaFramework.NetworkManager obj = (VivaFramework.NetworkManager)ToLua.CheckObject<VivaFramework.NetworkManager>(L, 1);
			obj.Connect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				VivaFramework.NetworkManager obj = (VivaFramework.NetworkManager)ToLua.CheckObject<VivaFramework.NetworkManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.Send(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				VivaFramework.NetworkManager obj = (VivaFramework.NetworkManager)ToLua.CheckObject<VivaFramework.NetworkManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
				obj.Send(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: VivaFramework.NetworkManager.Send");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			VivaFramework.NetworkManager obj = (VivaFramework.NetworkManager)ToLua.CheckObject<VivaFramework.NetworkManager>(L, 1);
			obj.Unload();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pushCall(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VivaFramework.NetworkManager obj = (VivaFramework.NetworkManager)o;
			LuaInterface.LuaFunction ret = obj.pushCall;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pushCall on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pushCall(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			VivaFramework.NetworkManager obj = (VivaFramework.NetworkManager)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.pushCall = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pushCall on a nil value");
		}
	}
}

