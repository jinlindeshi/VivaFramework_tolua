//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_GraphNodeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.GraphNode), typeof(System.Object));
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("SetConnectivityDirty", SetConnectivityDirty);
		L.RegFunction("UpdateRecursiveG", UpdateRecursiveG);
		L.RegFunction("GetConnections", GetConnections);
		L.RegFunction("AddConnection", AddConnection);
		L.RegFunction("RemoveConnection", RemoveConnection);
		L.RegFunction("ClearConnections", ClearConnections);
		L.RegFunction("ContainsConnection", ContainsConnection);
		L.RegFunction("GetPortal", GetPortal);
		L.RegFunction("Open", Open);
		L.RegFunction("SurfaceArea", SurfaceArea);
		L.RegFunction("RandomPointOnSurface", RandomPointOnSurface);
		L.RegFunction("GetGizmoHashCode", GetGizmoHashCode);
		L.RegFunction("SerializeNode", SerializeNode);
		L.RegFunction("DeserializeNode", DeserializeNode);
		L.RegFunction("SerializeReferences", SerializeReferences);
		L.RegFunction("DeserializeReferences", DeserializeReferences);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("position", get_position, set_position);
		L.RegConstant("MaxHierarchicalNodeIndex", 131071);
		L.RegConstant("MaxGraphIndex", 255);
		L.RegVar("Graph", get_Graph, null);
		L.RegVar("Destroyed", get_Destroyed, null);
		L.RegVar("NodeIndex", get_NodeIndex, null);
		L.RegVar("Flags", get_Flags, set_Flags);
		L.RegVar("Penalty", get_Penalty, set_Penalty);
		L.RegVar("Walkable", get_Walkable, set_Walkable);
		L.RegVar("Area", get_Area, null);
		L.RegVar("GraphIndex", get_GraphIndex, set_GraphIndex);
		L.RegVar("Tag", get_Tag, set_Tag);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetConnectivityDirty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			obj.SetConnectivityDirty();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateRecursiveG(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 2);
			Pathfinding.PathNode arg1 = (Pathfinding.PathNode)ToLua.CheckObject<Pathfinding.PathNode>(L, 3);
			Pathfinding.PathHandler arg2 = (Pathfinding.PathHandler)ToLua.CheckObject<Pathfinding.PathHandler>(L, 4);
			obj.UpdateRecursiveG(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConnections(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			System.Action<Pathfinding.GraphNode> arg0 = (System.Action<Pathfinding.GraphNode>)ToLua.CheckDelegate<System.Action<Pathfinding.GraphNode>>(L, 2);
			obj.GetConnections(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			obj.AddConnection(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			obj.RemoveConnection(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearConnections(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ClearConnections(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			bool o = obj.ContainsConnection(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPortal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			System.Collections.Generic.List<UnityEngine.Vector3> arg2 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 4, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			bool o = obj.GetPortal(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 2);
			Pathfinding.PathNode arg1 = (Pathfinding.PathNode)ToLua.CheckObject<Pathfinding.PathNode>(L, 3);
			Pathfinding.PathHandler arg2 = (Pathfinding.PathHandler)ToLua.CheckObject<Pathfinding.PathHandler>(L, 4);
			obj.Open(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SurfaceArea(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			float o = obj.SurfaceArea();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RandomPointOnSurface(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			UnityEngine.Vector3 o = obj.RandomPointOnSurface();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGizmoHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			int o = obj.GetGizmoHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SerializeNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.Serialization.GraphSerializationContext arg0 = (Pathfinding.Serialization.GraphSerializationContext)ToLua.CheckObject<Pathfinding.Serialization.GraphSerializationContext>(L, 2);
			obj.SerializeNode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeserializeNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.Serialization.GraphSerializationContext arg0 = (Pathfinding.Serialization.GraphSerializationContext)ToLua.CheckObject<Pathfinding.Serialization.GraphSerializationContext>(L, 2);
			obj.DeserializeNode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SerializeReferences(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.Serialization.GraphSerializationContext arg0 = (Pathfinding.Serialization.GraphSerializationContext)ToLua.CheckObject<Pathfinding.Serialization.GraphSerializationContext>(L, 2);
			obj.SerializeReferences(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeserializeReferences(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 1);
			Pathfinding.Serialization.GraphSerializationContext arg0 = (Pathfinding.Serialization.GraphSerializationContext)ToLua.CheckObject<Pathfinding.Serialization.GraphSerializationContext>(L, 2);
			obj.DeserializeReferences(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			Pathfinding.Int3 ret = obj.position;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Graph(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			Pathfinding.NavGraph ret = obj.Graph;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Graph on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Destroyed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			bool ret = obj.Destroyed;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Destroyed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NodeIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			int ret = obj.NodeIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NodeIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Flags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			uint ret = obj.Flags;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Flags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Penalty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			uint ret = obj.Penalty;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Penalty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Walkable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			bool ret = obj.Walkable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Walkable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Area(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			uint ret = obj.Area;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Area on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GraphIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			uint ret = obj.GraphIndex;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GraphIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			uint ret = obj.Tag;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Tag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			Pathfinding.Int3 arg0 = StackTraits<Pathfinding.Int3>.Check(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Flags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.Flags = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Flags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Penalty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.Penalty = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Penalty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Walkable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Walkable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Walkable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GraphIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.GraphIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GraphIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Tag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.GraphNode obj = (Pathfinding.GraphNode)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.Tag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Tag on a nil value");
		}
	}
}

