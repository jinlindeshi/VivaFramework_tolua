//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AstarPathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AstarPath), typeof(Pathfinding.VersionedMonoBehaviour));
		L.RegFunction("GetTagNames", GetTagNames);
		L.RegFunction("FindAstarPath", FindAstarPath);
		L.RegFunction("FindTagNames", FindTagNames);
		L.RegFunction("AddWorkItem", AddWorkItem);
		L.RegFunction("QueueGraphUpdates", QueueGraphUpdates);
		L.RegFunction("UpdateGraphs", UpdateGraphs);
		L.RegFunction("FlushGraphUpdates", FlushGraphUpdates);
		L.RegFunction("FlushWorkItems", FlushWorkItems);
		L.RegFunction("CalculateThreadCount", CalculateThreadCount);
		L.RegFunction("ConfigureReferencesInternal", ConfigureReferencesInternal);
		L.RegFunction("PausePathfinding", PausePathfinding);
		L.RegFunction("Scan", Scan);
		L.RegFunction("ScanAsync", ScanAsync);
		L.RegFunction("BlockUntilCalculated", BlockUntilCalculated);
		L.RegFunction("StartPath", StartPath);
		L.RegFunction("GetNearest", GetNearest);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Version", get_Version, null);
		L.RegVar("Distribution", get_Distribution, null);
		L.RegVar("Branch", get_Branch, null);
		L.RegVar("data", get_data, set_data);
		L.RegVar("active", get_active, set_active);
		L.RegVar("showNavGraphs", get_showNavGraphs, set_showNavGraphs);
		L.RegVar("showUnwalkableNodes", get_showUnwalkableNodes, set_showUnwalkableNodes);
		L.RegVar("debugMode", get_debugMode, set_debugMode);
		L.RegVar("debugFloor", get_debugFloor, set_debugFloor);
		L.RegVar("debugRoof", get_debugRoof, set_debugRoof);
		L.RegVar("manualDebugFloorRoof", get_manualDebugFloorRoof, set_manualDebugFloorRoof);
		L.RegVar("showSearchTree", get_showSearchTree, set_showSearchTree);
		L.RegVar("unwalkableNodeDebugSize", get_unwalkableNodeDebugSize, set_unwalkableNodeDebugSize);
		L.RegVar("logPathResults", get_logPathResults, set_logPathResults);
		L.RegVar("maxNearestNodeDistance", get_maxNearestNodeDistance, set_maxNearestNodeDistance);
		L.RegVar("scanOnStartup", get_scanOnStartup, set_scanOnStartup);
		L.RegVar("fullGetNearestSearch", get_fullGetNearestSearch, set_fullGetNearestSearch);
		L.RegVar("prioritizeGraphs", get_prioritizeGraphs, set_prioritizeGraphs);
		L.RegVar("prioritizeGraphsLimit", get_prioritizeGraphsLimit, set_prioritizeGraphsLimit);
		L.RegVar("colorSettings", get_colorSettings, set_colorSettings);
		L.RegVar("heuristic", get_heuristic, set_heuristic);
		L.RegVar("heuristicScale", get_heuristicScale, set_heuristicScale);
		L.RegVar("threadCount", get_threadCount, set_threadCount);
		L.RegVar("maxFrameTime", get_maxFrameTime, set_maxFrameTime);
		L.RegVar("batchGraphUpdates", get_batchGraphUpdates, set_batchGraphUpdates);
		L.RegVar("graphUpdateBatchingInterval", get_graphUpdateBatchingInterval, set_graphUpdateBatchingInterval);
		L.RegVar("debugPathData", get_debugPathData, set_debugPathData);
		L.RegVar("debugPathID", get_debugPathID, set_debugPathID);
		L.RegVar("OnAwakeSettings", get_OnAwakeSettings, set_OnAwakeSettings);
		L.RegVar("OnGraphPreScan", get_OnGraphPreScan, set_OnGraphPreScan);
		L.RegVar("OnGraphPostScan", get_OnGraphPostScan, set_OnGraphPostScan);
		L.RegVar("OnPathPreSearch", get_OnPathPreSearch, set_OnPathPreSearch);
		L.RegVar("OnPathPostSearch", get_OnPathPostSearch, set_OnPathPostSearch);
		L.RegVar("OnPreScan", get_OnPreScan, set_OnPreScan);
		L.RegVar("OnPostScan", get_OnPostScan, set_OnPostScan);
		L.RegVar("OnLatePostScan", get_OnLatePostScan, set_OnLatePostScan);
		L.RegVar("OnGraphsUpdated", get_OnGraphsUpdated, set_OnGraphsUpdated);
		L.RegVar("On65KOverflow", get_On65KOverflow, set_On65KOverflow);
		L.RegVar("navmeshUpdates", get_navmeshUpdates, null);
		L.RegVar("euclideanEmbedding", get_euclideanEmbedding, set_euclideanEmbedding);
		L.RegVar("showGraphs", get_showGraphs, set_showGraphs);
		L.RegVar("graphs", get_graphs, null);
		L.RegVar("maxNearestNodeDistanceSqr", get_maxNearestNodeDistanceSqr, null);
		L.RegVar("lastScanTime", get_lastScanTime, null);
		L.RegVar("isScanning", get_isScanning, null);
		L.RegVar("NumParallelThreads", get_NumParallelThreads, null);
		L.RegVar("IsUsingMultithreading", get_IsUsingMultithreading, null);
		L.RegVar("IsAnyGraphUpdateQueued", get_IsAnyGraphUpdateQueued, null);
		L.RegVar("IsAnyGraphUpdateInProgress", get_IsAnyGraphUpdateInProgress, null);
		L.RegVar("IsAnyWorkItemInProgress", get_IsAnyWorkItemInProgress, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTagNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			string[] o = obj.GetTagNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindAstarPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AstarPath.FindAstarPath();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindTagNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string[] o = AstarPath.FindTagNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddWorkItem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Action>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				System.Action arg0 = (System.Action)ToLua.ToObject(L, 2);
				obj.AddWorkItem(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Action<Pathfinding.IWorkItemContext>>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				System.Action<Pathfinding.IWorkItemContext> arg0 = (System.Action<Pathfinding.IWorkItemContext>)ToLua.ToObject(L, 2);
				obj.AddWorkItem(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Pathfinding.AstarWorkItem>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				Pathfinding.AstarWorkItem arg0 = StackTraits<Pathfinding.AstarWorkItem>.To(L, 2);
				obj.AddWorkItem(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.AddWorkItem");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int QueueGraphUpdates(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			obj.QueueGraphUpdates();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateGraphs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Bounds>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				UnityEngine.Bounds arg0 = ToLua.ToBounds(L, 2);
				obj.UpdateGraphs(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Pathfinding.GraphUpdateObject>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				Pathfinding.GraphUpdateObject arg0 = (Pathfinding.GraphUpdateObject)ToLua.ToObject(L, 2);
				obj.UpdateGraphs(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Bounds, float>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				UnityEngine.Bounds arg0 = ToLua.ToBounds(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.UpdateGraphs(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Pathfinding.GraphUpdateObject, float>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				Pathfinding.GraphUpdateObject arg0 = (Pathfinding.GraphUpdateObject)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.UpdateGraphs(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.UpdateGraphs");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlushGraphUpdates(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			obj.FlushGraphUpdates();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlushWorkItems(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			obj.FlushWorkItems();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateThreadCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.ThreadCount arg0 = (Pathfinding.ThreadCount)ToLua.CheckObject(L, 1, typeof(Pathfinding.ThreadCount));
			int o = AstarPath.CalculateThreadCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConfigureReferencesInternal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			obj.ConfigureReferencesInternal();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PausePathfinding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
			Pathfinding.PathProcessor.GraphUpdateLock o = obj.PausePathfinding();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Scan(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				obj.Scan();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Pathfinding.NavGraph[]>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				Pathfinding.NavGraph[] arg0 = ToLua.ToObjectArray<Pathfinding.NavGraph>(L, 2);
				obj.Scan(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Pathfinding.NavGraph>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				Pathfinding.NavGraph arg0 = (Pathfinding.NavGraph)ToLua.ToObject(L, 2);
				obj.Scan(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.Scan");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScanAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				System.Collections.Generic.IEnumerable<Pathfinding.Progress> o = obj.ScanAsync();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Pathfinding.NavGraph[]>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				Pathfinding.NavGraph[] arg0 = ToLua.ToObjectArray<Pathfinding.NavGraph>(L, 2);
				System.Collections.Generic.IEnumerable<Pathfinding.Progress> o = obj.ScanAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Pathfinding.NavGraph>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				Pathfinding.NavGraph arg0 = (Pathfinding.NavGraph)ToLua.ToObject(L, 2);
				System.Collections.Generic.IEnumerable<Pathfinding.Progress> o = obj.ScanAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.ScanAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BlockUntilCalculated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			AstarPath.BlockUntilCalculated(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
				AstarPath.StartPath(arg0);
				return 0;
			}
			else if (count == 2)
			{
				Pathfinding.Path arg0 = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				AstarPath.StartPath(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.StartPath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNearest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				Pathfinding.NNInfo o = obj.GetNearest(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Ray>(L, 2))
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 2);
				Pathfinding.GraphNode o = obj.GetNearest(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				Pathfinding.NNConstraint arg1 = (Pathfinding.NNConstraint)ToLua.CheckObject<Pathfinding.NNConstraint>(L, 3);
				Pathfinding.NNInfo o = obj.GetNearest(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4)
			{
				AstarPath obj = (AstarPath)ToLua.CheckObject<AstarPath>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				Pathfinding.NNConstraint arg1 = (Pathfinding.NNConstraint)ToLua.CheckObject<Pathfinding.NNConstraint>(L, 3);
				Pathfinding.GraphNode arg2 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 4);
				Pathfinding.NNInfo o = obj.GetNearest(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AstarPath.GetNearest");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Version(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, AstarPath.Version);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Distribution(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.Distribution);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Branch(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, AstarPath.Branch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.AstarData ret = obj.data;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_active(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.active);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showNavGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.showNavGraphs;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showNavGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showUnwalkableNodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.showUnwalkableNodes;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showUnwalkableNodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.GraphDebugMode ret = obj.debugMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugFloor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.debugFloor;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugFloor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugRoof(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.debugRoof;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugRoof on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_manualDebugFloorRoof(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.manualDebugFloorRoof;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index manualDebugFloorRoof on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showSearchTree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.showSearchTree;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showSearchTree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unwalkableNodeDebugSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.unwalkableNodeDebugSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index unwalkableNodeDebugSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logPathResults(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.PathLog ret = obj.logPathResults;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logPathResults on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxNearestNodeDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.maxNearestNodeDistance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxNearestNodeDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scanOnStartup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.scanOnStartup;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scanOnStartup on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fullGetNearestSearch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.fullGetNearestSearch;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fullGetNearestSearch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_prioritizeGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.prioritizeGraphs;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_prioritizeGraphsLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.prioritizeGraphsLimit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphsLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_colorSettings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.AstarColor ret = obj.colorSettings;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colorSettings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.Heuristic ret = obj.heuristic;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.heuristicScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_threadCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.ThreadCount ret = obj.threadCount;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index threadCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxFrameTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.maxFrameTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxFrameTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_batchGraphUpdates(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.batchGraphUpdates;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index batchGraphUpdates on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphUpdateBatchingInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.graphUpdateBatchingInterval;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphUpdateBatchingInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugPathData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.PathHandler ret = obj.debugPathData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugPathID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			ushort ret = obj.debugPathID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnAwakeSettings(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.OnAwakeSettings);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnGraphPreScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.OnGraphPreScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnGraphPostScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.OnGraphPostScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPathPreSearch(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.OnPathPreSearch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPathPostSearch(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.OnPathPostSearch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPreScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.OnPreScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPostScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.OnPostScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnLatePostScan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.OnLatePostScan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnGraphsUpdated(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.OnGraphsUpdated);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_On65KOverflow(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AstarPath.On65KOverflow);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_navmeshUpdates(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.NavmeshUpdates ret = obj.navmeshUpdates;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index navmeshUpdates on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_euclideanEmbedding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.EuclideanEmbedding ret = obj.euclideanEmbedding;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index euclideanEmbedding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.showGraphs;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.NavGraph[] ret = obj.graphs;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxNearestNodeDistanceSqr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.maxNearestNodeDistanceSqr;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxNearestNodeDistanceSqr on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastScanTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float ret = obj.lastScanTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lastScanTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isScanning(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.isScanning;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isScanning on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NumParallelThreads(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			int ret = obj.NumParallelThreads;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NumParallelThreads on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsUsingMultithreading(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.IsUsingMultithreading;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsUsingMultithreading on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAnyGraphUpdateQueued(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.IsAnyGraphUpdateQueued;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAnyGraphUpdateQueued on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAnyGraphUpdateInProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.IsAnyGraphUpdateInProgress;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAnyGraphUpdateInProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAnyWorkItemInProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool ret = obj.IsAnyWorkItemInProgress;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAnyWorkItemInProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.AstarData arg0 = (Pathfinding.AstarData)ToLua.CheckObject<Pathfinding.AstarData>(L, 2);
			obj.data = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_active(IntPtr L)
	{
		try
		{
			AstarPath arg0 = (AstarPath)ToLua.CheckObject<AstarPath>(L, 2);
			AstarPath.active = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showNavGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showNavGraphs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showNavGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showUnwalkableNodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showUnwalkableNodes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showUnwalkableNodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.GraphDebugMode arg0 = (Pathfinding.GraphDebugMode)ToLua.CheckObject(L, 2, typeof(Pathfinding.GraphDebugMode));
			obj.debugMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugFloor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.debugFloor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugFloor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugRoof(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.debugRoof = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugRoof on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_manualDebugFloorRoof(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.manualDebugFloorRoof = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index manualDebugFloorRoof on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showSearchTree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showSearchTree = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showSearchTree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unwalkableNodeDebugSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.unwalkableNodeDebugSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index unwalkableNodeDebugSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logPathResults(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.PathLog arg0 = (Pathfinding.PathLog)ToLua.CheckObject(L, 2, typeof(Pathfinding.PathLog));
			obj.logPathResults = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logPathResults on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxNearestNodeDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxNearestNodeDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxNearestNodeDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scanOnStartup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.scanOnStartup = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scanOnStartup on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fullGetNearestSearch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.fullGetNearestSearch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fullGetNearestSearch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_prioritizeGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.prioritizeGraphs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_prioritizeGraphsLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.prioritizeGraphsLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index prioritizeGraphsLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_colorSettings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.AstarColor arg0 = (Pathfinding.AstarColor)ToLua.CheckObject<Pathfinding.AstarColor>(L, 2);
			obj.colorSettings = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colorSettings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.Heuristic arg0 = (Pathfinding.Heuristic)ToLua.CheckObject(L, 2, typeof(Pathfinding.Heuristic));
			obj.heuristic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.heuristicScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_threadCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.ThreadCount arg0 = (Pathfinding.ThreadCount)ToLua.CheckObject(L, 2, typeof(Pathfinding.ThreadCount));
			obj.threadCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index threadCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxFrameTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxFrameTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxFrameTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_batchGraphUpdates(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.batchGraphUpdates = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index batchGraphUpdates on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_graphUpdateBatchingInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.graphUpdateBatchingInterval = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index graphUpdateBatchingInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.PathHandler arg0 = (Pathfinding.PathHandler)ToLua.CheckObject<Pathfinding.PathHandler>(L, 2);
			obj.debugPathData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPathID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.debugPathID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPathID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnAwakeSettings(IntPtr L)
	{
		try
		{
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			AstarPath.OnAwakeSettings = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnGraphPreScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnGraphDelegate arg0 = (Pathfinding.OnGraphDelegate)ToLua.CheckDelegate<Pathfinding.OnGraphDelegate>(L, 2);
			AstarPath.OnGraphPreScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnGraphPostScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnGraphDelegate arg0 = (Pathfinding.OnGraphDelegate)ToLua.CheckDelegate<Pathfinding.OnGraphDelegate>(L, 2);
			AstarPath.OnGraphPostScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPathPreSearch(IntPtr L)
	{
		try
		{
			Pathfinding.OnPathDelegate arg0 = (Pathfinding.OnPathDelegate)ToLua.CheckDelegate<Pathfinding.OnPathDelegate>(L, 2);
			AstarPath.OnPathPreSearch = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPathPostSearch(IntPtr L)
	{
		try
		{
			Pathfinding.OnPathDelegate arg0 = (Pathfinding.OnPathDelegate)ToLua.CheckDelegate<Pathfinding.OnPathDelegate>(L, 2);
			AstarPath.OnPathPostSearch = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPreScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnScanDelegate arg0 = (Pathfinding.OnScanDelegate)ToLua.CheckDelegate<Pathfinding.OnScanDelegate>(L, 2);
			AstarPath.OnPreScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPostScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnScanDelegate arg0 = (Pathfinding.OnScanDelegate)ToLua.CheckDelegate<Pathfinding.OnScanDelegate>(L, 2);
			AstarPath.OnPostScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnLatePostScan(IntPtr L)
	{
		try
		{
			Pathfinding.OnScanDelegate arg0 = (Pathfinding.OnScanDelegate)ToLua.CheckDelegate<Pathfinding.OnScanDelegate>(L, 2);
			AstarPath.OnLatePostScan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnGraphsUpdated(IntPtr L)
	{
		try
		{
			Pathfinding.OnScanDelegate arg0 = (Pathfinding.OnScanDelegate)ToLua.CheckDelegate<Pathfinding.OnScanDelegate>(L, 2);
			AstarPath.OnGraphsUpdated = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_On65KOverflow(IntPtr L)
	{
		try
		{
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			AstarPath.On65KOverflow = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_euclideanEmbedding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			Pathfinding.EuclideanEmbedding arg0 = (Pathfinding.EuclideanEmbedding)ToLua.CheckObject<Pathfinding.EuclideanEmbedding>(L, 2);
			obj.euclideanEmbedding = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index euclideanEmbedding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showGraphs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AstarPath obj = (AstarPath)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showGraphs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showGraphs on a nil value");
		}
	}
}

