---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by likai.
--- DateTime: 2020-06-03 15:01
--- 摇杆

local Joystick = class("Joystick")

function Joystick:Ctor(gameObject, stickObj, bgObj, startDragCall, dragingCall, endDragCall)

    self.gameObject = gameObject
    self.headRt = GetComponent.RectTransform(stickObj)
    self.MaxRadius = GetComponent.RectTransform(bgObj).sizeDelta.x/2 - self.headRt.sizeDelta.x/2

    self.pointerHandler = AddOrGetComponent(self.gameObject, Prayer.PointerHandler) ---@type Prayer.PointerHandler

    self.pointerHandler:AddCall(PointerHandler.DOWN, happyCall(self, self.DragStart))
    self.pointerHandler:AddCall(PointerHandler.UP, happyCall(self, self.EndDrag))

    local tag = self.gameObject
    self.uiCanvas = tag:GetComponent(typeof(UnityEngine.Canvas))
    while tag.transform.parent and tolua.isnull(self.uiCanvas) do
        tag = tag.transform.parent
        self.uiCanvas = tag:GetComponent(typeof(UnityEngine.Canvas))
    end

    self.startDragCall = startDragCall
    self.dragingCall = dragingCall
    self.endDragCall = endDragCall
end

function Joystick:DragLimit(anchorPos)
    --print("Joystick:DragLimit", anchorPos.x, anchorPos.y, self.MaxRadius)
    local dis = Vector2.Distance(Vector2.zero, anchorPos)
    if dis > self.MaxRadius then
        --print("Joystick:DragLimit越界了~")
        local rate = self.MaxRadius/dis
        anchorPos.x = anchorPos.x * rate
        anchorPos.y = anchorPos.y * rate
    end
    return anchorPos
end

---真实屏幕点击坐标 转化为UI坐标
---@param uiCanvas UnityEngine.Canvas
---@param tag UnityEngine.GameObject
function Joystick:ScreenToUICanvasPoint(clickPt, camera, tag)
    local vpt1 = camera:ScreenToViewportPoint(clickPt)
    local vpt2 = camera:WorldToViewportPoint(tag.transform.position)

    return camera:ViewportToWorldPoint(Vector3.New(vpt1.x, vpt1.y, vpt2.z))
end

---@param data UnityEngine.EventSystems.PointerEventData
function Joystick:DragStart(data)

    --self.startLoc = self:ScreenToUICanvasPoint(data.position, Camera.main, self.gameObject)
    --if self.moveRT then
    --    self.UIStartLoc = self.moveRT.position
    --    self.UIStartAnchorPos = self.moveRT.anchoredPosition
    --end
    AddEventListener(Stage, Event.UPDATE, self.Draging, self)
    if self.startDragCall then
        self.startDragCall()
    end

    ---TEST
    --print("Joystick:DragStart", MathUtil.GetRandomPoinInCircle(100))
    ---TEST
end

local baseAngleAvatar = Vector2.New(0, 1)
function Joystick:Draging()
    --self.headRt.anchoredPosition = self:ScreenToUICanvasPoint(Input.mousePosition, Camera.main, self.gameObject)
    local hehe, p = RectTransformUtility.ScreenPointToLocalPointInRectangle(self.headRt.parent,
            Input.mousePosition, nil, Vector2.zero)
    self.headRt.anchoredPosition = self:DragLimit(p)
    --print("Joystick:Draging", self.headRt.anchoredPosition.x, self.headRt.anchoredPosition.y,
    --        Vector2.Angle(baseAngleAvatar, self.headRt.anchoredPosition))

    if self.dragingCall then
        local angle = Vector2.Angle(baseAngleAvatar, self.headRt.anchoredPosition)
        if self.headRt.anchoredPosition.x < 0 then
            angle = -angle
        end
        self.dragingCall(angle)
    end
end

function Joystick:EndDrag()
    self.headRt.anchoredPosition = Vector2.zero
    RemoveEventListener(Stage, Event.UPDATE, self.Draging, self)
    if self.endDragCall then
        self.endDragCall()
    end
end

return Joystick