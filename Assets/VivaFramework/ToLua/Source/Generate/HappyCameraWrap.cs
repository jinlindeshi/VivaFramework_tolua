//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HappyCameraWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HappyCamera), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("EditorInit", EditorInit);
		L.RegFunction("SetAttachObj", SetAttachObj);
		L.RegFunction("SetDirectionObj", SetDirectionObj);
		L.RegFunction("SetCameraObj", SetCameraObj);
		L.RegFunction("SetOffsetV", SetOffsetV);
		L.RegFunction("GetOffsetV", GetOffsetV);
		L.RegFunction("TakeFollow", TakeFollow);
		L.RegFunction("FixTransform", FixTransform);
		L.RegFunction("SetCheckOverFun", SetCheckOverFun);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("cameraObj", get_cameraObj, set_cameraObj);
		L.RegVar("attachObj", get_attachObj, set_attachObj);
		L.RegVar("directionObj", get_directionObj, set_directionObj);
		L.RegVar("lockY", get_lockY, set_lockY);
		L.RegVar("tweenResumeSpeed", get_tweenResumeSpeed, set_tweenResumeSpeed);
		L.RegVar("resumCallBack", get_resumCallBack, set_resumCallBack);
		L.RegVar("autoUpdate", get_autoUpdate, set_autoUpdate);
		L.RegVar("vRotateAngle", get_vRotateAngle, set_vRotateAngle);
		L.RegVar("hRotateAngle", get_hRotateAngle, set_hRotateAngle);
		L.RegVar("followParams", get_followParams, set_followParams);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EditorInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
			obj.EditorInit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAttachObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.SetAttachObj(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDirectionObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.SetDirectionObj(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCameraObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.SetCameraObj(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOffsetV(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SetOffsetV(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOffsetV(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
			UnityEngine.Vector3 o = obj.GetOffsetV();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TakeFollow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				obj.TakeFollow();
				return 0;
			}
			else if (count == 2)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				obj.TakeFollow(arg0);
				return 0;
			}
			else if (count == 3)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.TakeFollow(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.TakeFollow(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				obj.TakeFollow(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 6);
				obj.TakeFollow(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 6);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 7);
				obj.TakeFollow(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HappyCamera.TakeFollow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FixTransform(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				obj.FixTransform();
				return 0;
			}
			else if (count == 2)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.FixTransform(arg0);
				return 0;
			}
			else if (count == 3)
			{
				HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				obj.FixTransform(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HappyCamera.FixTransform");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCheckOverFun(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HappyCamera obj = (HappyCamera)ToLua.CheckObject<HappyCamera>(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.SetCheckOverFun(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cameraObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			UnityEngine.GameObject ret = obj.cameraObj;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cameraObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_attachObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			UnityEngine.GameObject ret = obj.attachObj;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index attachObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_directionObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			UnityEngine.GameObject ret = obj.directionObj;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index directionObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lockY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			bool ret = obj.lockY;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lockY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tweenResumeSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			float ret = obj.tweenResumeSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tweenResumeSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_resumCallBack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			LuaInterface.LuaFunction ret = obj.resumCallBack;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index resumCallBack on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_autoUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			bool ret = obj.autoUpdate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index autoUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vRotateAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			float ret = obj.vRotateAngle;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vRotateAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hRotateAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			float ret = obj.hRotateAngle;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hRotateAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_followParams(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			HappyCamera.FollowVO ret = obj.followParams;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index followParams on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cameraObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.cameraObj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cameraObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_attachObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.attachObj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index attachObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_directionObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.directionObj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index directionObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lockY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.lockY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lockY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tweenResumeSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.tweenResumeSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tweenResumeSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_resumCallBack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.resumCallBack = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index resumCallBack on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.autoUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index autoUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_vRotateAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.vRotateAngle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vRotateAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hRotateAngle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.hRotateAngle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hRotateAngle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_followParams(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HappyCamera obj = (HappyCamera)o;
			HappyCamera.FollowVO arg0 = (HappyCamera.FollowVO)ToLua.CheckObject<HappyCamera.FollowVO>(L, 2);
			obj.followParams = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index followParams on a nil value");
		}
	}
}

