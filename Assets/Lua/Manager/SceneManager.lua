---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by likai.
--- DateTime: 2018/5/19 下午5:04
--- 场景管理器

SM = {}

function SM.AddScene(sceneConfName, sceneClass, callBack, removeCurScene, hideLoading, ...)
    --print("你妹啊~", sceneConfName, debug.traceback())
    local args = {...}
    SM.ins:AddScene(sceneConfName, sceneClass, callBack, removeCurScene, hideLoading, unpack(args))
end

function SM.RemoveScene(scene, callBack)
    SM.ins:RemoveScene(scene, callBack)
end

---@return UnityEngine.SceneManagement.Scene
function SM.GetSceneObj(sceneConfName)
    sceneConfName = sceneConfName or SM.ins.curConfName
    return SM.ins.nowScenes[sceneConfName].scene
end

---@return LuaScene
function SM.GetLuaScene(sceneConfName)
    --print("SM.GetLuaScene 你妹", sceneConfName, SM.ins.curConfName, debug.traceback())
    sceneConfName = sceneConfName or SM.ins.curConfName
    if not SM.ins.nowScenes[sceneConfName] then
        return nil
    end
    return SM.ins.nowScenes[sceneConfName].lua
end

local SceneManager = class("SceneManager")

function SceneManager:Ctor(callBack)

    SM.ins = self
    self.nowScenes = {}
    local fun = function()
        sceneMgr:LoadSceneAsync("BaseScene", callBack,
                UnityEngine.SceneManagement.LoadSceneMode.Single)
    end

    --print("SceneManager:Ctor", Application.isEditor, AppConst.UseBundle, AppConst.GameServerIP)
    if AppConst.UseBundle == false then
        fun()
    else
        local mainAbName = "scene_" .. string.lower("BaseScene")
        resMgr:LoadAssetBundle(mainAbName, true, fun)
    end
end


function SceneManager:AddScene(sceneConfName, sceneClass, callBack, removeCurScene, hideLoading, ...)
    if self.isLoading == true then
        print("当前有场景正在加载中~~~", sceneConfName)
        return
    end
    local sceneConf = SceneConfig[sceneConfName]
    if not sceneConf then
        return
    end
    local args = {...}

    local uiCamera = GetComponent.Canvas(Game.UICanvas).worldCamera
    if self.curConfName and self.nowScenes[self.curConfName] then
        if removeCurScene == true then
            --print("你妹啊~", self.curConfName, self.nowScenes[self.curConfName])
            self:RemoveScene(self.nowScenes[self.curConfName].scene)
        else
            local lua = self.nowScenes[self.curConfName].lua ---@type LuaScene
            if lua then
                LuaHelper.RemoveCameraFromStackList(lua.mainCamera, uiCamera)
                self.nowScenes[self.curConfName].lua = nil
                lua:Destroy()
            end
        end

        if uiCamera then
            local uiCamData = CameraExtensions.GetUniversalAdditionalCameraData(uiCamera)
            uiCamData.renderType = CameraRenderType.Base
        end
    end

    ---已有该场景，清理之前绑定在该场景的相关代码资源
    if self.nowScenes[sceneConfName] then

        local scene = self.nowScenes[sceneConfName].scene
        local lua = self.nowScenes[sceneConfName].lua
        if lua then
            lua:Destroy()
        end
        local luaScene ---@type LuaScene
        local mainCam
        UnityEngine.SceneManagement.SceneManager.SetActiveScene(scene)
        if sceneClass then
            luaScene = sceneClass.New(scene, sceneConfName, unpack(args))
            mainCam = luaScene.mainCamera
        end

        self.nowScenes[sceneConfName] = {scene=scene, lua=luaScene}
        self.curConfName = sceneConfName
        luaScene:Init()
        if callBack then
            callBack(scene)
        end
        return
    end

    local mainAbName = "scene_" .. string.lower(sceneConf.sceneName)

    self.isLoading = true



    ---加载时显示进度条界面
    if hideLoading ~= true then
        if not SM.loadingUI then
            SM.loadingUI = require("Module.Common.View.SceneLoading").New() ---@type SceneLoading
        end
        SM.loadingUI:Show(mainAbName)
    end

    local fun = function()
        ---@param scene UnityEngine.SceneManagement.Scene
        sceneMgr:LoadSceneAsync(sceneConf.sceneName, function (scene)
            print("SceneManager:AddScene", sceneConf.sceneName, callBack, hideLoading, scene)
            if hideLoading ~= true then
                SM.loadingUI:Hide()
            end

            self.isLoading = false
            local luaScene ---@type LuaScene
            local mainCam
            local uiCamera = GetComponent.Canvas(Game.UICanvas).worldCamera
            if sceneClass then
                luaScene = sceneClass.New(scene, sceneConfName, unpack(args))
                mainCam = luaScene.mainCamera
            elseif uiCamera then
                local uiCamData = CameraExtensions.GetUniversalAdditionalCameraData(uiCamera)
                uiCamData.renderType = CameraRenderType.Overlay
                LuaHelper.AddCameraToStackList(mainCam or Camera.main, uiCamera)
            end


            self.nowScenes[sceneConfName] = {scene=scene, lua=luaScene}
            self.curConfName = sceneConfName
            if callBack then
                callBack(scene)
            end

        end, UnityEngine.SceneManagement.LoadSceneMode.Additive)
    end

    print("是否需要加载场景资源~~~", mainAbName, AppConst.UseBundle)
    if AppConst.UseBundle == false then
        fun()
    else
        print("开始加载场景资源~~~", mainAbName)
        resMgr:LoadAssetBundle(mainAbName, true, fun)
    end
end


--function SceneManager:PreLoadSceneAssets(scene, callBack)
--
--end

function SceneManager:RemoveScene(scene, callBack)
    for confName, v in pairs(self.nowScenes) do
        if v.scene == scene then
            local lua = self.nowScenes[confName].lua ---@type LuaScene
            if lua then
                lua:Destroy()
            end
            self.nowScenes[confName] = nil
            break
        end
    end
    sceneMgr:UnLoadSceneAsync(scene, callBack)
end

return SceneManager